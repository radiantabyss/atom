'.source.*':
    'campaign':
        'prefix': 'campaign'
        'body': """
            campaign
        """

'.source.scss':
    'Disable code snippet':
        'prefix': 'fantasy'
        'disabled': true
    'mobile':
        'prefix': 'mobile'
        'body': """
            @include breakpoint(\'mobile\') {
                $1
            }
        """
    'mobile-small':
        'prefix': 'mobile-small'
        'body': """
            @include breakpoint(\'mobile-small\') {
                $1
            }
        """
    'tablet':
        'prefix': 'tablet'
        'body': """
            @include breakpoint(\'tablet\') {
                $1
            }
        """
    'hover':
        'prefix': 'hover'
        'body': """
            &:hover, &:active, &:focus {
                $1
            }
        """
    'theme':
        'prefix': 'theme'
        'body': """
            @include theme() {
                $1
            }
        """
'.php':
    'action':
        'prefix': 'action'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;

            class $2Action extends Action
            {
                public function run() {
                    $3
                }
            }
        """
    'action-admin':
        'prefix': 'action-admin'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Filters\\\\Filter;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\Presenter;
            use App\\\\Domains\\\\$1\\\\Transformers\\\\Transformer;
            use App\\\\Domains\\\\$1\\\\Validators\\\\Validator;

            class $2Action extends Action
            {
                public function run() {

                }
            }
        """
    'action-list':
        'prefix': 'action-list'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use Lumi\\\\Core\\\\Filter;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\ListPresenter;

            class ListAction extends Action
            {
                public function run() {
                    //get query
                    $query = Model\\\\$1::query();

                    //apply filters
                    $filters = \\\\Request::all();
                    Filter::apply($query, $filters);

                    //paginate
                    $paginated = $query->paginate(config('settings.per_page'));
                    $items = ListPresenter::run($paginated->items());
                    $total = $paginated->total();
                    $pages = $paginated->lastPage();

                    return Response::success(compact('items', 'total', 'pages'));
                }
            }
        """
    'action-single':
        'prefix': 'action-single'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\Presenter;

            class SingleAction extends Action
            {
                public function run($id) {
                    $item = Model\\\\$1::find($id);

                    if ( !$item ) {
                        return Response::error(\\\\Domain::name().' not found.');
                    }

                    $item = Presenter::run($item);

                    return Response::success(compact('item'));
                }
            }
        """
    'action-create':
        'prefix': 'action-create'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\Presenter;
            use App\\\\Domains\\\\$1\\\\Transformers\\\\Transformer;
            use App\\\\Domains\\\\$1\\\\Validators\\\\Validator;

            class CreateAction extends Action
            {
                public function run(Request $request) {
                    $data = \\\\Request::all();

                    //validate request
                    $validation = Validator::run($data);
                    if ( $validation !== true ) {
                        return Response::error($validation);
                    }

                    $data = Transformer::run($data);
                    $item = Model\\\\$1::create($data);
                    $item = Presenter::run($item);

                    return Response::success(compact('item'));
                }
            }
        """
    'action-edit':
        'prefix': 'action-edit'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\EditPresenter;

            class EditAction extends Action
            {
                public function run($id) {
                    $item = Model\\\\$1::find($id);

                    if ( !$item ) {
                        return Response::error(\\\\Domain::name().' not found.');
                    }

                    $item = EditPresenter::run($item);

                    return Response::success(compact('item'));
                }
            }
        """
    'action-update':
        'prefix': 'action-update'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\Presenter;
            use App\\\\Domains\\\\$1\\\\Transformers\\\\Transformer;
            use App\\\\Domains\\\\$1\\\\Validators\\\\Validator;

            class UpdateAction extends Action
            {
                public function run($id) {
                    $data = \\\\Request::all();

                    //validate request
                    $validation = Validator::run($data);
                    if ( $validation !== true ) {
                        return Response::error($validation);
                    }

                    $data = Transformer::run($data);
                    Model::where('id', $id)->update($data);

                    $item = Model\\\\$1::find($id);
                    $item = Presenter::run($item);

                    return Response::success(compact('item'));
                }
            }
        """
    'action-patch':
        'prefix': 'action-patch'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;
            use App\\\\Domains\\\\$1\\\\Presenters\\\\Presenter;
            use App\\\\Domains\\\\$1\\\\Transformers\\\\PatchTransformer;
            use App\\\\Domains\\\\$1\\\\Validators\\\\PatchValidator;

            class PatchAction extends Action
            {
                public function run($id) {
                    $data = \\\\Request::all();

                    //validate request
                    $validation = PatchValidator::run($data);
                    if ( $validation !== true ) {
                        return Response::error($validation);
                    }

                    $data = PatchTransformer::run($data);
                    Model::where('id', $id)->update($data);

                    $item = Model\\\\$1::find($id);
                    $item = Presenter::run($item);

                    return Response::success(compact('item'));
                }
            }
        """
    'action-delete':
        'prefix': 'action-delete'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Actions;

            use Illuminate\\\\Routing\\\\Controller as Action;
            use Lumi\\\\Core\\\\Response;
            use App\\\\Models as Model;

            class DeleteAction extends Action
            {
                public function run($id) {
                    $item = Model\\\\$1::find($id);

                    if ( !$item ) {
                        return Response::error(\\\\Domain::name().' not found.');
                    }

                    $item->delete();

                    return Response::success();
                }
            }
        """
    'operation':
        'prefix': 'operation'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Operations;

            use App\\\\Models as Model;

            class $2Operation
            {
                public static function run() {

                }
            }
        """
    'model':
        'prefix': 'model'
        'body': """
            <?php
            namespace App\\\\Models;

            class $1 extends Model
            {
                protected $table = '$2';
            }
        """
    'presenter':
        'prefix': 'presenter'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Presenters;

            class $2Presenter
            {
                public static function run($item) {
                    return $item;
                }
            }
        """
    'presenter-list':
        'prefix': 'presenter-list'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Presenters;

            class ListPresenter
            {
                public static function run($items) {
                    return $items;
                }
            }
        """
    'filter':
        'prefix': 'filter'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Filters;

            use Lumi\\\\Core\\\\Filter as RA_Filter;

            class Filter
            {
                use RA_Filter;
            }
        """
    'transformer':
        'prefix': 'transformer'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Transformers;

            class $2Transformer
            {
                public static function run($data) {
                    return $data;
                }
            }
        """
    'validation':
        'prefix': 'validation'
        'body': """
            //validate request
            $validation = Validator::run($data);
            if ( $validation !== true ) {
                return Response::error($validation);
            }
        """
    'validator':
        'prefix': 'validator'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Validators;

            use App\\\\Models as Model;

            class $2Validator
            {
                public static function run($data, $id = false) {
                    //check if item exists
                    if ( $id ) {
                        $item = Model\\\\$3::find($id);
                        if ( !$item ) {
                            return \\\\Domain::name().' not found.';
                        }
                    }

                    //validate request params
                    $validator = \\\\Validator::make($data, [
                        '$4name' => 'required',
                    ], [
                        '$5name' => 'Name is required',
                    ]);

                    if ( $validator->fails() ) {
                        return $validator->messages();
                    }

                    return true;
                }
            }
        """
    'validate':
        'prefix': 'validate'
        'body': """
            //validate request params
            $validator = \\\\Validator::make($data, [
                '$1id' => 'required',
            ], [
                'id' => 'ID is required',
            ]);

            if ( $validator->fails() ) {
                return $validator->messages();
            }
        """
    'job':
        'prefix': 'job'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Jobs;

            use Lumi\\\\Core\\\\Job;

            class $2Job extends Job
            {
                public function handle() {
                    $3
                }
            }

        """
    'command':
        'prefix': 'command'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Commands;

            use Illuminate\\\\Console\\\\Command;

            class $2Command extends Command
            {
                protected $signature = '$3';
                protected $description = '$4';

                public function handle() {
                    $5
                }
            }
        """
    'command-console':
        'prefix': 'command-console'
        'body': """
            <?php
            namespace App\\\\Console\\\\Commands;

            use Illuminate\\\\Console\\\\Command;

            class $1Command extends Command
            {
                protected $signature = '$2';
                protected $description = '$3';

                public function handle() {
                    $4
                }
            }
        """
    'mail':
        'prefix': 'mail'
        'body': """
            <?php
            namespace App\\\\Domains\\\\$1\\\\Mail;

            use Lumi\\\\Core\\\\Mail;

            class $2Mail extends Mail
            {
                public function build() {
                    return $this->subject('$3')
                        ->view('AppDomains::$1.Mail.views.$2', [
                            $4
                        ]);
                }
            }
        """

'.source.js':
    'module':
        'prefix': 'module'
        'body': """
            export default {
                namespaced: true,
                state: {

                },
                actions: {

                },
                mutations: {

                },
            }
        """
    'middleware':
        'prefix': 'middleware'
        'body': """
            import Store from '@lumi/Store';

            export default function() {
                return new Promise((resolve, reject) => {
                    $1
                });
            }
        """
    'transformer':
        'prefix': 'transformer'
        'body': """
            const $1Transformer = {
                run(data) {
                    return data;
                }
            }

            export default $1Transformer;
        """

'.vue':
    'route':
        'prefix': 'route'
        'body': """
            <router-link to="$1"></router-link>
        """
    'router-link':
        'prefix': 'router-link'
        'body': """
            <router-link to="$1"></router-link>
        """
    'action':
        'prefix': 'action'
        'body': """
            <script>
            export default {
                data() {
                    return {

                    }
                },
                methods: {

                },
                mounted() {

                },
            }
            </script>

            <template>
            <div>

            </div>
            </template>
        """
    'form':
        'prefix': 'form'
        'body': """
            <script>
            export default {
                name: 'Form',
                props: {
                    item: {
                        type: Object,
                        required: false,
                        default: null,
                    }
                },
                data() {
                    return {
                        fields: {},
                    }
                },
                methods: {
                    submit(e) {
                        let url;

                        if ( this.item ) {
                            url = `/${Domain.get()}/update/${this.item.id}`;
                        }
                        else {
                            url = `/${Domain.get()}/create`;
                        }

                        this.fields._event = e;

                        Request.post(url, this.fields, true)
                        .then(() => {
                            this.$router.push(`/${Domain.get()}`);
                        });
                    },
                },
                mounted() {
                    setTimeout(function() {
                        document.getElementsByTagName('input')[0].focus();
                    }, 150);

                    if ( this.item ) {
                        this.fields = {...this.item};
                    }
                },
            }
            </script>

            <template>
            <form>
                <div class="row">
                    <label></label>
                    <input type="text" class="input" v-model="" />
                </div>
                <div class="row row--nm">
                    <button type="submit" @click.prevent="submit" class="btn">Save</button>
                </div>
            </form>
            </template>
        """
    'component':
        'prefix': 'component'
        'body': """
            <script>
            export default {
                name: '$1Component',
                props: {

                },
                data() {
                    return {

                    }
                },
                computed: {

                },
                methods: {

                },
                mounted() {

                },
            }
            </script>

            <template>
            <div>

            </div>
            </template>
        """
    'partial':
        'prefix': 'partial'
        'body': """
            <script>
            export default {
                name: '$1',
            }
            </script>

            <template>
            <div>

            </div>
            </template>
        """
    'modal':
        'prefix': 'modal'
        'body': """
            <script>
            export default {
                name: '$1Modal',
                data() {
                    return {
                        name: '$2',
                    }
                },
            }
            </script>

            <template>
            <modal :name="name" classes="modal modal--small">
                <a @click="$modal.hide(name)" class="modal__close">
                    <sprite id="x" class="small" />
                </a>

                <div class="modal__content">

                </div>
            </modal>
            </template>
        """
    'checkboxes':
        'prefix': 'checkboxes'
        'body': """
            <div class="flex ms--10">
                <label class="input-radio ms-10" v-for="(value, text) in yes_no" :key="value">
                    <input type="radio" v-model="$1" :value="value" :checked="value == $2 ? 'checked' : ''" />
                    <span>{{ text | ucwords }}</span>
                </label>
            </div>
        """
