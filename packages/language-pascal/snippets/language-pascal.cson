'.source.pascal':
  'array declaration (var)':
    'prefix': 'arrayd'
    'body': 'array[0..${1:size}] of $0'
  'array declaration (const)':
    'prefix': 'arrayc'
    'body': 'array[0..${1:size}] of = ($0)'
  'begin … end':
    'prefix': 'begin'
    'body': """
      begin
      \t$0
      end;
    """
  'case … end':
    'prefix': 'case'
    'body': """
      case ${1:true} of
      \t$0
      end;
    """
  'case … (with else)':
    'prefix': 'casee'
    'body': """
      case ${1:true} of
      \t${2:value}: ${3:statement}
      else
        $0
      end;
    """
  'class (no parts)':
    'prefix': 'classd'
    'body': """
      T${1:ClassName} = class(T${2:ancestor})
      \t$0
      end;
    """
  'class (with Create/Destroy)':
    'prefix': 'classc'
    'body': """
      T${1:ClassName} = class(T${2:ancestor})
      private
      \t$0
      protected
      \t
      public
      \tconstructor Create; override;
      \tdestructor Destroy; override;
      published
      \t
      end;
    """
  'class full (commented)':
    'prefix': 'classfc'
    'body': """
      T${1:ClassName} = class(T${2:ancestor})
      private
      \t{ private declarations }
      \t$0
      protected
      \t{ protected declarations }
      \t
      public
      \t{ public declarations }
      \t
      published
      \t{ published declarations }
      \t
      end;
    """
  'class full (uncommented)':
    'prefix': 'classfu'
    'body': """
      T${1:ClassName} = class(T${2:ancestor})
      private
      \t$0
      protected
      \t
      public
      \t
      published
      \t
      end;
    """
  'constructor descendant':
    'prefix': 'CreateC'
    'body': 'constructor Create(AOwner: TComponent); override;'
  'constructor':
    'prefix': 'constructorc'
    'body': 'constructor Create(${1:params}); ${2:override;}'
  'constructor … destructor':
    'prefix': 'constructord'
    'body': """
      constructor Create(${1:params});
      destructor Destroy; override;$0
    """
  'destructor':
    'prefix': 'destructor'
    'body': 'destructor Destroy; override;$0'
  'else … end':
    'prefix': 'else'
    'body': """
      else
      begin
      \t$0
      end;
    """
  'enum':
    'prefix': 'enum'
    'body': 'T${1:EnumName} = (${2:meOne}, $0);'
  'for … begin end':
    'prefix': 'forb'
    'body': """
      for ${1:i} := ${2:0} to ${3:max} do
      begin
      \t$0
      end;
    """
  'for in … end':
    'prefix': 'forin'
    'body': """
      for ${1:MyElem} in ${2:MyList} do
      begin
      \t$0
      end;
    """
  'for downto … end':
    'prefix': 'forr'
    'body': """
      for ${1:i} := ${2:max} downto ${3:0} do
      begin
      \t$0
      end;
    """
  'for … (no begin end)':
    'prefix': 'for'
    'body': """
      for ${1:i} := ${2:0} to ${3:max} do
      \t$0
    """
  'function … end':
    'prefix': 'function'
    'body': """
      function ${1:MyFunction}(${2:params}): ${3:integer};
      begin
      \t$0
      end;
    """
  'if … (no begin end)':
    'prefix': 'if'
    'body': """
      if ${1:True} then
      \t$0
    """
  'if … end':
    'prefix': 'ifb'
    'body': """
      if ${1:True} then
      begin
      \t$0
      end;
    """
  'if … else (no begin end)':
    'prefix': 'ife'
    'body': """
      if ${1:True} then
      \t${2:then code here}
      else
      \t${3:else code here}
    """
  'if … else end':
    'prefix': 'ifeb'
    'body': """
      if ${1:True} then
      begin
      \t${2:then code here}
      end
      else
      begin
      \t${3:else code here}
      end;
    """
  'if not Assigned … (no begin end)':
    'prefix': 'ifnass'
    'body': """
      if not Assigned(${1:variable}) then
      \t${1:variable} := T${2:ClassName}.Create(${3:params});$0
    """
  'if nil … (no begin end)':
    'prefix': 'ifnil'
    'body': """
      if ${1:variable} = nil then
      \t${1:variable} := T${2:ClassName}.Create(${3:params});$0
    """
  'interface declaration':
    'prefix': 'interface'
    'body': """
      I${1:InterfaceName}: interface(${2:ancestor})
      \t${3:[GUID]}
      \t$0
      end;
    """
  'procedure':
    'prefix': 'procedure'
    'body': """
      procedure ${1:MyProcedure}(${2:params});
      begin
      \t$0
      end;
    """
  'property getter':
    'prefix': 'prop'
    'body': 'property ${1:name}: ${2:type} read ${3:getter} write ${4:setter};$0'
  'property field':
    'prefix': 'propf'
    'body': 'property ${1:name}: ${2:type} read F${1:name} write F${1:name};$0'
  'property get set':
    'prefix': 'propgs'
    'body': 'property ${1:name}: ${2:type} read Get${1:name} write Set${1:name};$0'
  'property read only':
    'prefix': 'propro'
    'body': 'property ${1:name}: ${2:type} read ${3:getter};$0'
  'property read only field':
    'prefix': 'proprof'
    'body': 'property ${1:name}: ${2:type} read F${1:name};$0'
  'raise':
    'prefix': 'raise'
    'body': 'raise ${1:Exception}.Create(\'${2:Error Message}\');$0'
  'region':
    'prefix': 'region'
    'body': """
      {$REGION \'${1:MyRegion}\'}
      \t$0
      {$ENDREGION}'
    """
  'repeat until':
    'prefix': 'repeat'
    'body': """
      repeat
      \t$0
      until (${1:True});
    """
  'set declaration':
    'prefix': 'set'
    'body': 'T${1:SetName = set of $0};'
  'try object … finally':
    'prefix': 'try'
    'body': """
      ${1:variable} := ${2:TComponent}.Create(${3:params});
      try
      \t$0
      finally
      \t${1:variable}
      end;
    """
  'try … finally':
    'prefix': 'tryf'
    'body': """
      try
      \t$0
      finally
      \t$1
      end;
    """
  'try … except':
    'prefix': 'trye'
    'body': """
      try
      \t$0
      except
      \ton ${1:e}: ${2:Exception} do
      end;
    """
  'variable':
    'prefix': 'var'
    'body': '${1:variable}: ${2:type};$0'
  'unit … implementation … end':
    'prefix': 'unit'
    'body': """
      unit ${1:unit_name};

      interface

      uses
      \tSysUtils${2:, Classes};

      implementation

      $0

      end.
    """
  'while statement':
    'prefix': 'whileb'
    'body': """
      while ${1:statement} do
      begin
      \t$0
      end;
    """
  'while not EOF':
    'prefix': 'whileneof'
    'body': """
      ${1:dataset}.First;
      while not ${1:dataset}.EOF do
      begin
      \t$0
      \t${1:dataset}.Next;
      end;
    """
  'while (no begin end)':
    'prefix': 'while'
    'body': """
      while ${1:statement} do
      \t$0;
    """
